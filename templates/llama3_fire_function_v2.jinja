{# Metadata #} 
{% set stop_strings = ["<|im_start|>", "<|im_end|>"] %}
{% set message_roles = ['system', 'user', 'assistant', 'tool'] %}
{% set tool_start = "functools" %}

{%- set system_prompt_suffix -%}
Respond using your internal knowledge when possible. If external information is needed, call one or more provided functions.

To call functions:
1. Prefix calls with 'functools' (no closing marker)
2. Generate all calls in a single JSON list:
   functools[{"name": "function_name", "arguments": {key: value, ...}}, ...]
3. Follow the JSON schema exactly - don't invent arguments or values
4. Format argument types correctly (e.g. 7.0 for float)
5. Choose functions that best match user intent

Available functions (JSON spec):
{{ tools }}
{%- endset -%}

{# Template #}

{%- for message in messages -%}
    {%- set role = message['role'] | lower -%}
    {%- if role not in message_roles -%}
        {{ raise_exception('Invalid role ' + message['role'] + '. Only ' + message_roles | join(', ') + ' are supported.') }}
    {%- endif -%}
    
    {%- set content = message['content'] | default('', true) | trim -%}
    
    {%- if loop.first -%}
        {{ bos_token }}<|start_header_id|>{{ role }}<|end_header_id|>
{{ system_prompt_suffix }}
{{ content }}
{{ eos_token }}
    {%- endif -%}
    
    {%- if not loop.first -%}
        <|start_header_id|>{{ role }}<|end_header_id|>
{{ content }}
        {%- if 'tool_calls' in message and message['tool_calls'] -%}
            {%- set tool_calls = [] -%}
            {%- for call in message['tool_calls'] -%}
                {%- set tool_calls = tool_calls + [{'name': call['function']['name'], 'arguments': call['function']['arguments']}] -%}
            {%- endfor -%}
            functools{{ tool_calls | tojson }}
        {%- endif -%}
        {{ eos_token }}
    {%- endif -%}
{%- endfor -%}

<|start_header_id|>assistant<|end_header_id|>